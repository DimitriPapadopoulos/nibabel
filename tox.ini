[tox]
requires =
  tox>=4
envlist =
  # No preinstallations
  py3{8,9,10,11,12}-none
  # Minimum Python
  py38-{min,full}
  # x86 support range
  py3{9,10,11}-{full,pre}-{x86,x64}
  py3{9,10,11}-pre-{x86,x64}
  # x64-only range
  py312-{full,pre}-x64
  doctest
  style
  typecheck
skip_missing_interpreters = true

[gh-actions]
python =
  3.8: py38
  3.9: py39
  3.10: py310
  3.11: py311
  3.12: py312

[gh-actions:env]
DEPENDS =
  none: none
  pre: pre
  full: full
  min: min

ARCH =
  x64: x64
  x86: x86

CHECK =
  build: build
  doctest: doctest
  style: style
  typecheck: typecheck

[testenv]
description = Typical pytest invocation with coverage
labels = test
install_command =
  python -I -m pip install \
    --only-binary numpy,scipy,h5py
    --extra-index-url https://pypi.anaconda.org/scientific-python-nightly-wheels/simple \
    {opts} {packages}
pip_pre =
  pre: true
# getpass.getuser() sources for Windows:
pass_env =
  LOGNAME
  USER
  LNAME
  USERNAME
extras = test
deps =
  # NEP29/SPEC0 + 1yr: Test on minor release series within the last 3 years
  # We're extending this to all optional dependencies
  # This only affects the range that we test on; numpy is the only non-optional
  # dependency, and will be the only one to affect pip environment resolution.
  min: numpy ==1.20
  min: packaging ==17
  min: importlib_resources ==1.3; python_version < '3.9'
  min: scipy ==1.6
  min: matplotlib ==3.4
  min: h5py ==2.10
  min: pillow ==8.1
  min: indexed_gzip ==1.4
  min: pyzstd ==0.14.3
  # Numpy 2.0 is a major breaking release; we cannot put much effort into
  # supporting until it's at least RC stable
  pre: numpy <2.0.dev0
  # Scipy stopped producing win32 wheels at py310
  py3{8,9}-full-x86,x64: scipy >=1.6
  full,pre: matplotlib >=3.4
  # h5py stopped producing win32 wheels at py310, has yet to produce py312 wheels
  py3{8,9}-full-x86,py3{8,9,10,11}-x64: h5py >=2.10
  full,pre: pillow >=8.1
  full,pre: indexed_gzip >=1.4
  full,pre: pyzstd >=0.14.3
  min: pydicom ==2.1
  full,pre: pydicom >=2.1
  # pydicom master seems to be breaking things
  # pre: pydicom @ git+https://github.com/pydicom/pydicom.git@main

commands =
  pytest --doctest-modules --doctest-plus \
    --cov nibabel --cov-report xml:cov.xml \
    --junitxml test-results.xml \
    --pyargs nibabel {posargs:-n auto}

[testenv:install]
description = "Install and verify imports succeed"
labels = test
deps =
extras =
install_command = python -I -m pip install {opts} {packages}
commands =
  python -c "import nibabel; print(nibabel.__version__)"

[testenv:docs]
description = Typical pytest invocation with coverage
labels = docs
allowlist_externals = make
extras = doc
commands =
  make -C doc html

[testenv:doctest]
description = Typical pytest invocation with coverage
labels = docs
allowlist_externals = make
extras =
  doc
  test
commands =
  make -C doc doctest

[testenv:style]
description = Check our style guide
labels = check
deps =
  flake8
  blue
  isort[colors]
skip_install = true
commands =
  blue --diff --color nibabel
  isort --diff --color nibabel
  flake8 nibabel

[testenv:style-fix]
description = Auto-apply style guide to the extent possible
labels = pre-release
deps =
  blue
  isort[colors]
skip_install = true
commands =
  blue nibabel
  isort nibabel

[testenv:typecheck]
description = Check type consistency
labels = check
deps =
  mypy
  pytest
  types-setuptools
  types-Pillow
  pydicom
  numpy
  pyzstd
  importlib_resources
skip_install = true
commands =
  mypy nibabel

[testenv:build{,-strict}]
labels =
  check
  pre-release
deps =
  build
  twine
skip_install = true
set_env =
  build-strict: PYTHONWARNINGS=error
commands =
  python -m build
  python -m twine check dist/*

[testenv:publish]
depends = build
labels = release
deps =
  twine
skip_install = true
commands =
  python -m twine upload dist/*

[testenv:zenodo]
deps = gitpython
labels = pre-release
skip_install = true
commands =
  python tools/prep_zenodo.py
