# This file encodes a lot of our intended support range, as well as some
# details about dependency availability.
#
# The majority of the information is contained in tox.envlist and testenv.deps.
[tox]
requires =
  tox>=4
  tox-uv
envlist =
  # No preinstallations
  py3{9,10,11,12,13,13t}-none
  # Minimum Python
  py39-{min,full}
  # x86 support range
  py3{9,10,11}-{full,pre}-{x86,x64}
  py3{9,10,11}-pre-{x86,x64}
  # x64-only range
  py3{12,13}-{full,pre}-x64
  # Special environment for numpy 2.0-dev testing
  py313-dev-x64
  install
  doctest
  style
  typecheck
skip_missing_interpreters = true

# Configuration that allows us to split tests across GitHub runners effectively
[gh-actions]
python =
  3.9: py39
  3.10: py310
  3.11: py311
  3.12: py312
  3.13: py313
  3.13t: py313t

[gh-actions:env]
DEPENDS =
  none: none, install
  pre: pre
  dev: dev
  full: full, install
  min: min

ARCH =
  x64: x64
  x86: x86
  arm64: arm64

[testenv]
description = Pytest with coverage
labels = test
pip_pre =
  pre,dev: true
pass_env =
  # getpass.getuser() sources for Windows:
  LOGNAME
  USER
  LNAME
  USERNAME
  # Environment variables we check for
  NIPY_EXTRA_TESTS
  # Python variables
  PYTHON_GIL
  # Pass user color preferences through
  PY_COLORS
  FORCE_COLOR
  NO_COLOR
  CLICOLOR
  CLICOLOR_FORCE
set_env =
  dev: PIP_ONLY_BINARY=numpy,scipy,h5py
  !dev: PIP_ONLY_BINARY=numpy,scipy,h5py,pillow,matplotlib
  pre,dev: PIP_EXTRA_INDEX_URL=https://pypi.anaconda.org/scientific-python-nightly-wheels/simple
  pre,dev: UV_EXTRA_INDEX_URL=https://pypi.anaconda.org/scientific-python-nightly-wheels/simple
  py313t: PYTHONGIL=0
extras =
  test

  # Simple, thanks pillow
  !none: dicomfs
  !none: indexed_gzip

  # Matplotlib has wheels for everything except win32 (x86)
  {min,full,pre,dev}-{x,arm}64: viewers

  # Nightly, but not released cp313t wheels for: scipy
  # When released, remove the py3* line and add min/full to the pre,dev line
  py3{9,10,11,12,13}-{min,full}-{x,arm}64: spm
  {pre,dev}-{x,arm}64: spm

  # No cp313t wheels for: h5py, pyzstd
  py3{9,10,11,12,13}-{min,full,pre-dev}-{x,arm}64: minc2
  py3{9,10,11,12,13}-{min,full,pre-dev}-{x,arm}64: zstd

  # No win32 wheels for scipy/matplotlib after py39
  py39-full-x86: spm
  py39-full-x86: viewers

deps =
  # Numpy 2.0 is a major breaking release; we cannot put much effort into
  # supporting until it's at least RC stable
  dev: numpy >=2.1.dev0
  dev: pydicom @ git+https://github.com/pydicom/pydicom.git@main

uv_resolution =
  min: lowest-direct

commands =
  pytest --doctest-modules --doctest-plus \
    --cov nibabel --cov-report xml:cov.xml \
    --junitxml test-results.xml \
    --durations=20 --durations-min=1.0 \
    --pyargs nibabel {posargs:-n auto}

[testenv:install]
description = Install and verify import succeeds
labels = test
deps =
extras =
commands =
  python -c "import nibabel; print(nibabel.__version__)"

[testenv:docs]
description = Build documentation site
labels = docs
allowlist_externals = make
extras = doc
commands =
  make -C doc html

[testenv:doctest]
description = Run doctests in documentation site
labels = docs
allowlist_externals = make
extras =
  doc
  test
commands =
  make -C doc doctest

[testenv:style]
description = Check our style guide
labels = check
deps =
  ruff>=0.3.0
skip_install = true
commands =
  ruff check --diff nibabel
  ruff format --diff nibabel

[testenv:style-fix]
description = Auto-apply style guide to the extent possible
labels = pre-release
deps =
  ruff
skip_install = true
commands =
  ruff check --fix nibabel
  ruff format nibabel

[testenv:spellcheck]
description = Check spelling
labels = check
deps =
  codespell[toml]
skip_install = true
commands =
  codespell . {posargs}

[testenv:typecheck]
description = Check type consistency
labels = check
deps =
  mypy
  pytest
  types-setuptools
  types-Pillow
  pydicom
  numpy
  pyzstd
  importlib_resources
  typing_extensions
skip_install = true
commands =
  mypy nibabel

[testenv:build{,-strict}]
labels =
  check
  pre-release
deps =
  build
  twine
skip_install = true
set_env =
  build-strict: PYTHONWARNINGS=error
commands =
  python -m build
  python -m twine check dist/*

[testenv:publish]
depends = build
labels = release
deps =
  twine
skip_install = true
commands =
  python -m twine upload dist/*

[testenv:zenodo]
deps = gitpython
labels = pre-release
skip_install = true
commands =
  python tools/prep_zenodo.py
